-- Builder by MrKMG
-- Version 1

--TGM Def
Dig = {}
Dig.__index = Dig

function Dig.init()
    local dig = {}
    setmetatable(dig,Dig)
    dig.collectBlocks = true
    return dig
end

function Dig:forward()
    local count = 0
    while turtle.detect() and count <= 256 do
        turtle.dig()
        count = count + 1
        sleep(1)
    end
    if count == 256 then
        return false
    else
        return true
    end
end

function Dig:up()
    local count = 0
    while turtle.detectUp() and count <= 256 do
        turtle.digUp()
        count = count + 1
        sleep(1)
    end
    if count == 256 then
        return false
    else
        return true
    end
end

function Dig:down()
    local count = 0
    while turtle.detectDown() and count <= 256 do
        turtle.digDown()
        count = count + 1
        sleep(1)
    end
    if count == 256 then
        return false
    else
        return true
    end
end

--TGM Def
TGM = {}
TGM.__index = TGM

function TGM.init(x,y,z,d)
    local grid = {}
    setmetatable(grid,TGM)
    grid.x = x or 1
    grid.y = y or 1
    grid.z = z or 1
    grid.d = d or 0
    return grid
end

function TGM:rotateRight()
    turtle.turnRight()
    self.d = (self.d + 1) % 4
end

function TGM:rotateLeft()
    turtle.turnLeft()
    self.d = (self.d - 1) % 4
end


function TGM:forward()
    self:refuel()
    if turtle.forward() then
        if     self:getD() == 0 then self.y = self.y + 1
        elseif self:getD() == 1 then self.x = self.x + 1
        elseif self:getD() == 2 then self.y = self.y - 1
        elseif self:getD() == 3 then self.x = self.x - 1
        return true
        end
    else
        sleep(1)
        return false
    end
end

function TGM:back()
    self:refuel()
    if turtle.back() then
        if     self:getD() == 0 then self.y = self.y - 1
        elseif self:getD() == 1 then self.x = self.x - 1
        elseif self:getD() == 2 then self.y = self.y + 1
        elseif self:getD() == 3 then self.x = self.x + 1
        end
        return true
    else
        sleep(1)
        return false
    end
end

function TGM:up()
    self:refuel()
    if turtle.up() then
        self.z = self.z + 1
        return true
    else
        return false
    end
end

function TGM:down()
    self:refuel()
    if turtle.down() then
        self.z = self.z - 1
    else
        sleep(1)
        return false
    end
end

function TGM:rotateTo(d)
    if self.d == 0  then
        if d == 1 then
            self:rotateRight()
        elseif d == 2 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 3 then
            self:rotateLeft()
        end
    elseif self.d == 1 then
        if d == 2 then
            self:rotateRight()
        elseif d == 3 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 0 then
            self:rotateLeft()
        end
    elseif self.d == 2 then
        if d == 3 then
            self:rotateRight()
        elseif d == 0 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 1 then
            self:rotateLeft()
        end
    elseif self.d == 3  then
        if d == 0 then
            self:rotateRight()
        elseif d == 1 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 2 then
            self:rotateLeft()
        end
    end
end

function TGM:moveTo(x,y,z)
    if self:getX() ~= x then
        -- X
        if self:getD() == 0 or self:getD() == 2 then self:rotateTo(1) end
        while self:getX() < x do
            sleep(0.1)
            if self:getD() == 1 then
                self:forward()
            else 
                self:back()
            end
        end
        while self:getX() > x do
            sleep(0.1)
            if self:getD() == 1 then
                self:back()
            else 
                self:forward()
            end
        end
    end
    -- Y
    if self:getY() ~= y then
        if self:getD() == 1 or self:getD() == 3 then self:rotateTo(0) end
        while self:getY() < y do
            sleep(0.1)
            if self:getD() == 0 then
                self:forward()
            else 
                self:back()
            end
        end
        while self:getY() > y do
            sleep(0.1)
            if self:getD() == 0 then
                self:back()
            else 
                self:forward()
            end
        end
    end
    -- Z
    while self:getZ() < z do
        self:up()
        sleep(0.1)
    end
    while self:getZ() > z do
        sleep(0.1)
        self:down()
    end
end

function TGM:refuel()
    if turtle.getFuelLevel() == 0 then
        while turtle.getItemCount(16) == 0 do
            clearScreen()
            print("Waiting for fuel, press enter when ready")
            read()
        end
        turtle.select(16)
        turtle.refuel(1)
        return true
    end
    return true
end

function TGM:getX()
    return self.x
end

function TGM:getY()
    return self.y
end

function TGM:getZ()
    return self.z
end

function TGM:getD()
    return self.d
end

function clearScreen()
    term.clear()
end

function askString(question)
    local ans
    local cont = true
    clearScreen()
    while cont == true do -- Width Question
        print(question)
        ans = read()
        clearScreen()
        if ans == nil then
            print( "Please answer with something" )
        else
            cont = false
        end
    end
    return ans
end

function getLink(file)
    return "https://raw.github.com/" .. author .. "/" .. project .. "/" .. branch .. "/" .. "templates/" .. file
end

function download(file)
    print("Downloading, " .. file)
    local data = http.get(getLink(file))
    if data then
        print(file .. " downloaded")
        local file = fs.open(file,"w")
        file.write(data.readAll())
        file.close()
        return true
    end
end

function checkAndRefillSlot(slot)
    if turtle.getItemCount(slot) == 0 then
        local returnX = bot:getX()
        local returnY = bot:getY()
        local returnZ = bot:getZ()
        local returnD = bot:getD()
        local box = boxes[slot]

        bot:moveTo(box[x],box[y],box[z]+1)
        turtle.select(slot)
        while turtle.suck() == false do
            print("Please refill crate " .. slot .. "and press enter.")
            read()
        end
        bot:moveTo(returnX,returnY,returnZ)
        bot:rotate(returnD)
    end
end

function placeDown(slot)
    checkAndRefillSlot(slot)
    turtle.select(slot)
    turtle.placeDown()
end

function main()
    local height = 1;
    local f = fs.open(template, "r")
    local z = 1
    local y = 0
    local item = 0
    local len = 0
    line = f.readLine()
    while line ~= nil do
        y = y + 1
        len = str:len()
        if len > 0 then
            for x = 1, len do
                item = tonumber(str:sub(x,x))
                if item == nil or item == 0 then
                    print("Skipping " .. x .. " , " .. y .. " , " .. z)
                else
                    print("Placing ".. item .. " at " .. x .. " , " .. y .. " , " .. z)
                    bot:moveTo(x,y,z+1)
                    placeDown(item)
                end
            end
        else
            z = z + 1
            y = 0
        end
        line = f.readLine()
    end
end

homeLocation = { x = 1, y = 0, z = 1 }

boxes = {
    1 = { x = 1, y = 0, z = 0 },
    2 = { x = 2, y = 0, z = 0 },
    3 = { x = 3, y = 0, z = 0 },
    4 = { x = 4, y = 0, z = 0 },
    5 = { x = 5, y = 0, z = 0 },
    6 = { x = 6, y = 0, z = 0 },
    7 = { x = 7, y = 0, z = 0 },
    8 = { x = 8, y = 0, z = 0 },
    9 = { x = 9, y = 0, z = 0 }
}

template = askString("What template?")
bot = TGM.init(1,0,1,0)

if fs.exists(template) == false then
    download(template)
end
if fs.exists(template) then
    main()
else
    clearScreen()
    print("Template could not be found. Exiting")
end

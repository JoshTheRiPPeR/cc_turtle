-- Seeder by MrKMG
-- Version 1

--TGM Def
TGM = {}
TGM.__index = TGM

function TGM.init(x,y,z,d)
    local grid = {}
    setmetatable(grid,TGM)
    grid.x = x or 1
    grid.y = y or 1
    grid.z = z or 1
    grid.d = d or 0
    return grid
end

function TGM:rotateRight()
    turtle.turnRight()
    self.d = (self.d + 1) % 4
end

function TGM:rotateLeft()
    turtle.turnLeft()
    self.d = (self.d - 1) % 4
end


function TGM:forward()
    self.refuel()
    turtle.foward()
    if     self.d == 0 then self.y = self.y + 1
    elseif self.d == 1 then self.x = self.x + 1
    elseif self.d == 2 then self.y = self.y - 1
    elseif self.d == 3 then self.x = self.x - 1
    end
end

function TGM:back()
    self.refuel()
    turtle.back()
    if     self.d == 0 then self.y = self.y - 1
    elseif self.d == 1 then self.x = self.x - 1
    elseif self.d == 2 then self.y = self.y + 1
    elseif self.d == 3 then self.x = self.x + 1
    end
end

function TGM:up()
    self.refuel()
    turtle.up()
end

function TGM:down()
    self.refuel()
    turtle.down()
end

function TGM:rotateTo(dir)
    -- TODO IMPROVE THIS
    while self.d ~= dir do
        rotateRight()
    end
end

function TGM:moveTo(x,y,z)
    y = y or self.y
    z = z or self.z
    if self.x ~= x then
        if self.d == 0 or self.d == 2 then rotateTo(1) end
        while self.x < x do self.d == 3 and forward() or back() end
        while self.x > x do self.d == 1 and forward() or back() end
    end
    if self.y ~= y then
        if self.d == 1 or self.d == 3 then rotateTo(0) end
        while self.y < y do self.d == 2 and forward() or back() end
        while self.y > y do self.d == 0 and forward() or back() end
    end
end

function TGM:_refuel()
    if turtle.getFuelLevel() == 0 then
        if turtle.getItemCount(16) == 0 then
            return  false
        else
            turtle.select(16)
            turtle.refuel(1)
            return true
        end
    end
    return true
end

function TGM:getX()
    return self.x
end

function TGM:getY()
    return self.y
end

function TGM:getZ()
    return self.z
end

function TGM:getD()
    return self.d
end

--End TGM

function clearScreen()
    term.clear()
    writeAt("Seeder",5,1)
    term.setCursorPos( 1, 3 )
end

function writeAt(string, columnVar, rowVar)
    term.setCursorPos( columnVar, rowVar )
    write(string)
end

function writeNum(number, columnVar, rowVar)
    digits = math.ceil(math.log10(number))
    if 10^digits == number then
        digits = digits + 1
    end
    term.setCursorPos( columnVar, rowVar )
    while digits > 1 do
        digits = digits - 1
        columnVar = columnVar - 1
        term.setCursorPos( columnVar, rowVar )
    end
    write(number)
end

function writeBodyTemplate()
    clearScreen()
    print ( [[
 +--------------------------------+
 |Seeds Needed:                 0 |
 |Seeds Planted:                0 |
 +--------------------------------+
 |             Status             |
 |[                              ]|
 |                0%              |
 +--------------------------------+
]] )
end

function writeBodyTotals()
    writeNum(totalNeeded,33,4)
end

function writeBodyProgress()
    writeNum(seedsPlanted, 33, 5)

    percentage = math.ceil((seedsPlanted / totalNeeded) * 100)
    writeNum(percentage, 19, 9)

    -- Update Percentage Bar
    percentageBar = math.floor(percentage * 0.3)
    columnVar = 4
    while percentageBar > 0 do
        writeAt( "~", columnVar, 8 )
        percentageBar = percentageBar - 1
        columnVar = columnVar + 1
    end
end

function getSeed()
    local returnX = bot:getX()
    local returnY = bot:getY()
    local returnD = bot:getD()

    bot.moveTo(0,1)
    local failedToPick = true
    while failedToPick do
        for s = 0, 15 do
            turtle.select( s )
            if turtle.suckDown() and failedToPick then
                failedToPick = false
            end
        end
        if failedToPick then
            clearScreen()
            print("Waiting for seeds, press enter when ready")
            read()
            writeBodyTemplate()
            writeBodyTotals()
            writeBodyProgress()
        end
    end
    bot.moveTo(returnX,returnY)
    bot.rotateTo(returnD)
end

function TGM:refuel()
    while self._refuel() == false do
        clearScreen()
        print("Waiting for fuel, press enter when ready")
        read()
        writeBodyTemplate()
        writeBodyTotals()
        writeBodyProgress()
    end
end

function selectSeed()
    local slot = 0
    while slot == 0 do
        for i=1,15 do
            if slot == 0 then
                if turtle.getItemCount(i) > 0 then
                    slot = i
                end
            end
        end
        if slot == 0 then
            getSeed()
        end
    end
    turtle.select(slot)
end

function placeSeed()
    bot:refuel()
    selectSeed()
    turtle.placeDown()
    seedsPlanted = seedsPlanted + 1
    writeBodyProgress()
end

function plantRow(width,spacing)
    for x = 1, width do
        bot:forward()
        if ( x - 1 ) % spacing == 0 then
            placeSeed()
        end
    end
    for x = 1, spacing do
        bot:back()
    end
end

bot = TGM.init(1,1,1,0)
seedsPlanted = 0
totalNeeded = 0

-- seedCrateOffset = 0

function main()
    local Args = {...}

    local length = Args[0] or 20
    local width = Args[1] or 8
    local hSpacing = Args[2] or 1
    local vSpacing = Artgs[3] or 1

    totalNeeded = length * width

    writeBodyTemplate()
    writeBodyTotals()

    for y = 1,length do
        if ( y - 1 ) % == 0 then
            bot:turnRight()
            plant()
            bot:turnLeft()
        end
        bot:forward()
    end

    bot:turnRight()
    bot:turnRight()
    for y = 1,length do
        bot:forward()
    end
    bot:turnLeft()
    bot:turnLeft()
end

main()

    

-- Seeder by MrKMG
-- Version 1

--TGM Def
TGM = {}
TGM.__index = TGM

function TGM.init(x,y,z,d)
    local grid = {}
    setmetatable(grid,TGM)
    grid.x = x or 1
    grid.y = y or 1
    grid.z = z or 1
    grid.d = d or 0
    return grid
end

function TGM:rotateRight()
    turtle.turnRight()
    self.d = (self.d + 1) % 4
end

function TGM:rotateLeft()
    turtle.turnLeft()
    self.d = (self.d - 1) % 4
end


function TGM:forward()
    self:refuel()
    if turtle.forward() then
        if     self:getD() == 0 then self.y = self.y + 1
        elseif self:getD() == 1 then self.x = self.x + 1
        elseif self:getD() == 2 then self.y = self.y - 1
        elseif self:getD() == 3 then self.x = self.x - 1
        return true
        end
    else
        sleep(1)
        return false
    end
end

function TGM:back()
    self:refuel()
    if turtle.back() then
        if     self:getD() == 0 then self.y = self.y - 1
        elseif self:getD() == 1 then self.x = self.x - 1
        elseif self:getD() == 2 then self.y = self.y + 1
        elseif self:getD() == 3 then self.x = self.x + 1
        end
        return true
    else
        sleep(1)
        return false
    end
end

function TGM:up()
    self:refuel()
    if turtle.up() then
        self.z = self.z + 1
        return true
    else
        return false
    end
end

function TGM:down()
    self:refuel()
    if turtle.down() then
        self.z = self.z - 1
    else
        sleep(1)
        return false
    end
end

function TGM:rotateTo(d)
    if self.d == 0  then
        if d == 1 then
            self:rotateRight()
        elseif d == 2 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 3 then
            self:rotateLeft()
        end
    elseif self.d == 1 then
        if d == 2 then
            self:rotateRight()
        elseif d == 3 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 0 then
            self:rotateLeft()
        end
    elseif self.d == 2 then
        if d == 3 then
            self:rotateRight()
        elseif d == 0 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 1 then
            self:rotateLeft()
        end
    elseif self.d == 3  then
        if d == 0 then
            self:rotateRight()
        elseif d == 1 then
            self:rotateRight()
            self:rotateRight()
        elseif d == 2 then
            self:rotateLeft()
        end
    end
end

function TGM:moveTo(x,y,z)
    if self:getX() ~= x then
        -- X
        if self:getD() == 0 or self:getD() == 2 then self:rotateTo(1) end
        while self:getX() < x do
            sleep(0.1)
            if self:getD() == 1 then
                self:forward()
            else 
                self:back()
            end
        end
        while self:getX() > x do
            sleep(0.1)
            if self:getD() == 1 then
                self:back()
            else 
                self:forward()
            end
        end
    end
    -- Y
    if self:getY() ~= y then
        if self:getD() == 1 or self:getD() == 3 then self:rotateTo(0) end
        while self:getY() < y do
            sleep(0.1)
            if self:getD() == 0 then
                self:forward()
            else 
                self:back()
            end
        end
        while self:getY() > y do
            sleep(0.1)
            if self:getD() == 0 then
                self:back()
            else 
                self:forward()
            end
        end
    end
    -- Z
    while self:getZ() < z do
        self:up()
        sleep(0.1)
    end
    while self:getZ() > z do
        sleep(0.1)
        self:down()
    end
end

function TGM:refuel()
    if turtle.getFuelLevel() == 0 then
        while turtle.getItemCount(16) == 0 do
            clearScreen()
            print("Waiting for fuel, press enter when ready")
            read()
        end
        turtle.select(16)
        turtle.refuel(1)
        return true
    end
    writeBodyTemplate()
    writeBodyTotals()
    writeBodyProgress()
    return true
end

function TGM:getX()
    return self.x
end

function TGM:getY()
    return self.y
end

function TGM:getZ()
    return self.z
end

function TGM:getD()
    return self.d
end

--End TGM

function clearScreen()
    term.clear()
    writeAt("Seeder",5,1)
    term.setCursorPos( 1, 3 )
end

function writeAt(string, columnVar, rowVar)
    term.setCursorPos( columnVar, rowVar )
    write(string)
end

function writeNum(number, columnVar, rowVar)
    digits = math.ceil(math.log10(number))
    if 10^digits == number then
        digits = digits + 1
    end
    term.setCursorPos( columnVar, rowVar )
    while digits > 1 do
        digits = digits - 1
        columnVar = columnVar - 1
        term.setCursorPos( columnVar, rowVar )
    end
    write(number)
end

function writeBodyTemplate()
    clearScreen()
    print ( [[
 +--------------------------------+
 |Seeds Needed:                 0 |
 |Seeds Planted:                0 |
 +--------------------------------+
 |             Status             |
 |[                              ]|
 |                0%              |
 +--------------------------------+
]] )
end

function writeBodyTotals()
    writeNum(totalNeeded,33,4)
end

function writeBodyProgress()
    writeNum(seedsPlanted, 33, 5)

    percentage = math.ceil((seedsPlanted / totalNeeded) * 100)
    writeNum(percentage, 19, 9)

    -- Update Percentage Bar
    percentageBar = math.floor(percentage * 0.3)
    columnVar = 4
    while percentageBar > 0 do
        writeAt( "~", columnVar, 8 )
        percentageBar = percentageBar - 1
        columnVar = columnVar + 1
    end
end

function getSeed()
    local returnX = bot:getX()
    local returnY = bot:getY()
    local returnZ = bot:getZ()
    local returnD = bot:getD()

    bot:moveTo(seedLocation.x,seedLocation.y,seedLocation.z+1)
    local failedToPick = true
    while failedToPick do
        for s = 1, 15 do
            turtle.select( s )
            if turtle.suckDown() and failedToPick then
                failedToPick = false
            end
        end
        if failedToPick then
            clearScreen()
            print("Waiting for seed, press enter when ready")
            print("Need "..(totalNeeded - seedsPlanted).." more")
            read()
            writeBodyTemplate()
            writeBodyTotals()
            writeBodyProgress()
        end
    end
    bot:moveTo(seedLocation.x,seedLocation.y,seedLocation.z+2)
    bot:moveTo(returnX,returnY,returnZ)
    bot:rotateTo(returnD)
end

function selectSeed()
    local slot = 0
    while slot == 0 do
        for i=1,15 do
            if slot == 0 then
                if turtle.getItemCount(i) > 0 then
                    slot = i
                end
            end
        end
        if slot == 0 then
            getSeed()
        end
    end
    turtle.select(slot)
end

function placeSeed()
    bot:refuel()
    selectSeed()
    turtle.placeDown()
    seedsPlanted = seedsPlanted + 1
    writeBodyProgress()
end

function askNumber(question,default)
    local ans
    local cont = true
    clearScreen()
    if default then question = question.." ("..default..")" end
    while cont == true do -- Width Question
        print(question)
        ans = tonumber(read())
        clearScreen()
        if ans == nil and default then
            ans = default
            cont = false
        elseif ans == nil then
            print( "Please answer with a number." )
        elseif ans > 0 then
            cont = false
        elseif ans == 0 then
            print( "Must be greater than 0." )
        else
            print( "Must be positive." )
        end
    end
    return ans
end

bot = TGM.init(1,0,1,0)
seedsPlanted = 0
totalNeeded = 0
homeLocation = {
    x = 1,
    y = 0,
    z = 1
}
seedLocation = {
    x = 1,
    y = 0,
    z = 0
}

function main(Args)
    length = askNumber("What Length is the target area?")
    width = askNumber("What Width is the target area?")
    hOff = askNumber("Horizantal spacing",1)
    vOff = askNumber("Vertical spacing",1)

    totalNeeded = ( length / vOff ) * ( width / hOff )

    writeBodyTemplate()
    writeBodyTotals()

    bot:moveTo(homeLocation.x,homeLocation.y,homeLocation.z+1)
    local x,y
    for y = 1,length do
        for x = 1,width do
            if ( (x - 1) % hOff ) == 0 and ( (y - 1) % vOff ) == 0 then
                bot:moveTo(x,y,homeLocation.z+1)
                placeSeed()
            end
        end
    end

    bot:moveTo(homeLocation.x,homeLocation.y,homeLocation.z)
    bot:rotateTo(0)
end

main({...})

local tArgs = { ... }
if #tArgs ~= 3 then
    print( "Usage: bore <height> <width> <length>" )
    return
end

-- Mine in a quarry pattern until we hit something we can't dig
local length = tonumber( tArgs[1] )
if length < 1 then
    print( "Tunnel length must be greater than 1" )
    return
end

-- Mine in a quarry pattern until we hit something we can't dig
local width = tonumber( tArgs[2] )
local width2 = width-1
if width < 0 then
    print( "Tunnel width must be greater than zero" )
    return
end

-- Mine in a quarry pattern until we hit something we can't dig
local height = tonumber( tArgs[3] )
local height2 = height-2
if height < 0 then
    print( "Tunnel height must be greater than zero" )
    return
end
    
local depth = 0
local collected = 0

local function collect()
    collected = collected + 1
    if math.fmod(collected, 25) == 0 then
        print( "Mined "..collected.." blocks." )
    end
end

local function tryDig()
    while turtle.dig() do
        collect()
        sleep(0.5)
        if not turtle.detect() then
            return true
        end
    end
    return not turtle.detect()
end

local function tryDigUp()
    while turtle.digUp() do
        collect()
        sleep(0.5)
        if not turtle.detectUp() then
            return true
        end
    end
    return not turtle.detectUp()
end

local function digHeight()
  if height > 1 then
    tryDigUp()
    for nn=1,height2 do
      turtle.up()
      tryDigUp()
    end
      turtle.down()
    end
  end
end
local function digWidth()
  for nn=1,width2 do
    tryDig()
    turtle.forward()
    digHeight()
  end
end
local function moveWidth()
  for nn=1,width2 do
    if not turtle.forward() then
            print( "Aborting Tunnel." )
            return false
        end
  end
  return true
end
local function tryForward()
  if not turtle.forward() then
    print( "Aborting Tunnel." )
    return false
  end
  return true
end
print( "Tunnelling..." )

for n=1,length do
    turtle.placeDown()
    digHeight()
  if width > 0 then
    turtle.turnLeft()
    tryDig()
    if not tryForward() then
            print( "Aborting Tunnel." )
            break
        end
    digHeight()
    digWidth()
    turtle.turnRight()
    turtle.turnRight()
    if not tryForward() then
            print( "Aborting Tunnel." )
            break
        end
    if not moveWidth() then
            print( "Aborting Tunnel." )
            break
        end
    tryDig()
    if not tryForward() then
            print( "Aborting Tunnel." )
            break
        end
    digHeight()
    digWidth()
    turtle.turnLeft()
    turtle.turnLeft()
    if not moveWidth() then
            print( "Aborting Tunnel." )
            break
        end
    if not tryForward() then
            print( "Aborting Tunnel." )
            break
        end
    turtle.turnRight()
    end
    if n<length then
        tryDig()
        if not turtle.forward() then
            print( "Aborting Tunnel." )
            break
        end
    else
        print( "Tunnel complete." )
    end
end

--[[
print( "Returning to start..." )

-- Return to where we started
turtle.turnLeft()
turtle.turnLeft()
while depth > 0 do
    if turtle.forward() then
        depth = depth - 1
    else
        turtle.dig()
    end
end
turtle.turnRight()
turtle.turnRight()
]]

print( "Tunnel complete." )
print( "Mined "..collected.." blocks total." )
